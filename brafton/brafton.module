<?php

/**
*	Define Key Information.
*/

function imp_info()	{
	$key['public'] = 'public key here';
	$key['secret'] = 'private key here';
	$key['feed_number'] = 0;
	return $key;
}

error_reporting(E_ALL); 
ini_set( 'display_errors','1');

/**
* Gets the API library.
*/

require_once dirname(__FILE__) . '/RCClientLibrary/AdferoArticlesVideoExtensions/AdferoVideoClient.php';
require_once dirname(__FILE__) . '/RCClientLibrary/AdferoArticles/AdferoClient.php';
require_once dirname(__FILE__) . '/RCClientLibrary/AdferoPhotos/AdferoPhotoClient.php';

/**
* Gets the Brafton vocabulary id for use in the module.
*/

function get_brafton_vid( $vocabulary_name )	{
	$result = db_query( 'SELECT vid FROM {vocabulary} WHERE name="%s"',$vocabulary_name );
	$vid = db_fetch_object( $result )->vid;
	if ( $vid )
		return $vid;
	else
		return FALSE;
}

/**
* Checks if an article already exists in the DB with the inputted Brafton ID.
*/

function check_if_exists( $id )	{
	$result = db_query( 'SELECT nid FROM {brafton_video} WHERE brafton_id=%d',$id );
	$result = db_fetch_array( $result );
	if ( $result )
		return TRUE;
	else
		return FALSE;
}

/**
* Checks if a taxonomy term already exists, creates if it it doesn't, and returns the tid either way.
*/

function set_article_categories( $category )	{

	$vid = get_brafton_vid( 'Brafton video categories' );
	$terms = taxonomy_get_tree( $vid );
	$category_exists = 0;
	foreach ( $terms as $value ) {
		if( $value->name == $category->name ) {
			$category_exists = 1;
			$tid = $value->tid;
			break;
		}
	}
	if ( $category_exists === 0 ) {
		$new_term = array(
			'name' => $category->name,
			'vid' => $vid,
		);

		taxonomy_save_term( $new_term );
		$term = taxonomy_get_term_by_name( $category->name );
		$tid = $term[0]->tid;
		return $tid;
	} else {
		return $tid;
	}
	
}

/**
* Implementation of hook_node_info().
*/

function brafton_node_info()	{
	return array(
		b_video => array(
			'name' => t( 'Brafton Video' ),
			'module' => 'brafton',
			'description' => 'Create brafton video articles.',
		)
	);
}

/**
* Implementation of hook_form().
*/

function brafton_form( &$node,$form_state )	{
	$type = node_get_types( 'type',$node  );

	//Defines form elements for the content type's title and body.

	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => check_plain( $type->title_label ),
		'#required' => TRUE,
		'#default_value' => $node->title,
		'#weight' => -5,
	);
	$form['body_field'] = node_body_field( $node,$type->body_label,$type->min_word_count );
	$form['brafton_video'] = array(
		'#type' => 'textarea',
		'#title' => t( 'Video embed code' ),
		'#default_value' => isset( $node->brafton_video ) ? $node->brafton_video : '',
	);
	$form['brafton_image'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Url for the featured image' ),
		'#default_value' => isset( $node->brafton_image ) ? $node->brafton_image : '',
	);
	//$form['brafton_category'] = taxonomy_form( get_brafton_vid( 'Brafton video categories' ) );
	$form['brafton_id'] = array(
		'#type' => 'textfield',
		'#title' => t( 'Brafton id number' ),
		'#default_value' => isset( $node->brafton_id ) ? $node->brafton_id : '',
	);
	return $form;
}

/**
* Implementation of hook_insert().
*/

function brafton_insert( $node )	{
	db_query( "INSERT INTO {brafton_video} (vid,nid,brafton_video,brafton_image,brafton_id) VALUES (%d,%d,'%s','%s',%d)",$node->vid,$node->nid,$node->brafton_video,$node->brafton_image,$node->brafton_id );
}

/**
* Implementation of hook_delete().
*/

function brafton_delete( $node )	{
	db_query( 'DELETE FROM {brafton_video} WHERE nid=%d',$node->nid );
}

/**
* Implementation of hook_load().
*/

function brafton_load( $node )	{
	$additions = db_query( 'SELECT brafton_video,brafton_image,brafton_id FROM {brafton_video} WHERE vid=%d',$node->vid );
	$additions = db_fetch_array( $additions );
	return $additions;
}

/**
* Implementation of hook_view().
*/

function brafton_view( $node )	{
	$node = node_prepare($node, $teaser);
	$node->content['myfield'] = array(
		'#value' => $node->brafton_video,
		'#weight' => 0,
	);
	//$node = gen_related_posts( $node );

	return $node;
}

/**
* Implementation of hook_cron().
*/

function brafton_cron()	{

	$key = imp_info();

	$baseURL = "http://livevideo.api.brafton.com/v2/";
	$photoURI = "http://pictures.brafton.com/v2/";
	$videoClient = new AdferoVideoClient( $baseURL,$key['public'],$key['secret'] );
	$client = new AdferoClient( $baseURL,$key['public'],$key['secret'] );
	$photoClient = new AdferoPhotoClient( $photoURI );
	$photos = $client->ArticlePhotos();
	$feeds = $client->Feeds();
	$feedList = $feeds->ListFeeds( 0,10 );
	$feedNum = $key['feed_number'];
	$articles = $client->Articles();
	$categories = $client->Categories(); 
	$articleList = $articles->ListForFeed( $feedList->items[ $feedNum ]->id,'live',0,100 );

	$videoOutClient = $videoClient->videoOutputs();
	
	foreach ( $articleList->items as $value ) {
		$id = $value->id;
		if( check_if_exists( $id ) )
			continue;
		$node = new stdClass();
		$thisArticle = $client->Articles()->Get( $id );
		//$embedCode = $videoClient->VideoPlayers()->GetWithFallback( $id,'redbean',1,'rcflashplayer',1 );
		//if ( strpos( $embedCode->embedCode,'adobe' ) < 30 )	{
		//	continue;
		//}
		//Wraps a Div around the embed code
		//$embed_code = "<div id='post-single-video'>" . $embedCode->embedCode . "</div>";
		
		$presplash = $thisArticle->fields['preSplash'];
		$postsplash = $thisArticle->fields['postSplash'];
				
		$videoList=$videoOutClient->ListForArticle($id,0,10);
		$list=$videoList->items;
		$ogg=false;
		$mp4=false;
		$flv=false;
		$height=512;
		$width=316;
		
		foreach($list as $listItem){
			$output=$videoOutClient->Get($listItem->id);
			//logMsg($output->path);
			if($output->type=="htmlmp4" && !$mp4) {$mp4=$output->path; $width=$output->width; $height=$output->height;}
			if($output->type=="htmlogg" && !$ogg) {$ogg=$output->path; $width=$output->width; $height=$output->height;}
			if($output->type=="flash" && !$flv) {$flv=$output->path; $width=$output->width; $height=$output->height;}
		}
		//old code
		//$embedCode = $videoClient->VideoPlayers()->GetWithFallback($brafton_id, 'redbean', 1, 'rcflashplayer', 1);
		
		
		$embedCode=<<<EOT
		<video id='video-$id' class='video-js vjs-default-skin'
			controls preload='auto' width="$width" height='$height'
			poster='$presplash'
			data-setup='{"example_option":true}'>
			<source src="$mp4" type='video/mp4' />
			<source src="$ogg" type='video/ogg' />
			<source src="$flv" type='video/flash' />
		</video>
EOT;
		
		//Gets the photo url if there is a photo and loads that into the node object.
		$thisPhotos = $photos->ListForArticle( $id,0,100 );
		if ( isset( $thisPhotos->items[0]->id ) ) {
			$photoId = $photos->Get( $thisPhotos->items[0]->id )->sourcePhotoId;
			$photoUrl = $photoClient->Photos()->GetLocationUrl( $photoId )->locationUri;
			$dilly = upload_image( $photoUrl );
			$node->brafton_image = $dilly;
		}

		//Checks if the taxonomy terms are new, creates them if they are, then files them in the node object.

		if( $categories->ListForFeed( $feedList->items[ $feedNum ]->id,0,100 )->items )	{
			$categoryId = $categories->ListForArticle( $id,0,100 )->items[0]->id;
			$category = $categories->Get( $categoryId );
			$category = set_article_categories( $category );
			$node->taxonomy = $category;
		}

		$node->title = $thisArticle->fields['title'];
		$node->body = $thisArticle->fields['content'];
		$node->type = 'b_video';
		$node->promote = 0;
		$node->sticky = 0;
		$node->format = 2;
		$node->status = 1;
		$node->field_braf_img[0]['value'] = $dilly;
		$node->brafton_video = $embedCode;
		$node->brafton_id = $id;
		if ( $node = node_submit( $node ) ) {
			$node->created = strtotime( $thisArticle->fields['lastModifiedDate'] );
    		node_save( $node );
    	}
	}
}

function upload_image( $url )	{
	$filename = str_replace ( '/','',strrchr( $url,'/' ) );
	$image = file_get_contents( $url );
	$directory = 'sites/default/files/brafton-images/';
	if( !file_exists( $directory ) )
		@mkdir( $directory );
	$newfile = fopen( $directory . $filename,'w' );
	fwrite( $newfile,$image );
	fclose( $newfile );
	return url( $directory . $filename );
}

function display_brafton_video()	{
	$limit = 10;
	$query = 'SELECT nid FROM {node} ORDER BY created DESC';
	$count = 'SELECT COUNT(*) FROM {node} WHERE type="b_video"';
	$result = pager_query( $query,$limit,0,$count );
	$html_string = '';
	while ( $row = db_fetch_array( $result ) ) {
		$node = node_load( $row['nid'] );
		$url = url( 'node/' . $node->nid );
		$html_string .= '<div id="brafton-post"><img src="' . $node->brafton_image . '" width="200" style="float:left;margin-right:10px;" /><h2><a href="' . $url . '">' . $node->title . '</a></h2><span style="font-size:11px;color:#999;font-style:italic;">' . date( 'F j, Y', $node->created ) . '</span><br />' . $node->teaser . '<a href="' . $url . '">Watch now</a></div>';
	}
	return $html_string . theme( 'pager',$count );
}

function display_brafton_archives( $year,$month )	{
	if (  $month == 12 ) {
		$next_month = 1;
		$next_year = $year++;
	} else {
		$next_month = $month++;
		$next_year = $year;
	}
	$limit = 10;
	$time1 = strtotime( $year . '-' . $month );
	$time2 = strtotime( $next_year . '-' . $next_month );
	$query = 'SELECT nid FROM {node} WHERE type="b_video" AND created BETWEEN ' . $time2 . ' AND ' . $time1 . ' ORDER BY created DESC';
	$count = 'SELECT COUNT(*) FROM {node} WHERE type="b_video" AND created BETWEEN ' . $time2 . ' AND ' . $time1;
	$result = pager_query( $query,$limit,0,$count );
	$html_string = '<h4>' . date( 'F Y',$time1 ) . '</h4>';
	while ( $row = db_fetch_array( $result ) ) {
		$node = node_load( $row['nid'] );
		$url = url( 'node/' . $node->nid );
		$html_string .= '<div id="brafton-post"><img src="' . $node->brafton_image . '" width="200" style="float:left;margin-right:10px;" /><h2><a href="' . $url . '">' . $node->title . '</a></h2><span style="font-size:11px;color:#999;font-style:italic;">' . date( 'F j, Y', $node->created ) . '</span><br />' . $node->teaser . '<a href="' . $url . '">Watch now</a></div>';
	}
	return $html_string . theme( 'pager',$count );
}

/**
* Implementation of hook_menu().
*/

function brafton_menu()	{
	$items['video-gallery'] = array(
		'title' => 'Video Gallery',
		'page callback' => 'display_brafton_video',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	$items['video-gallery/archive'] = array(
		'title' => 'Video Gallery Archives',
		'page callback' => 'display_brafton_archives',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

/**
* Implementation of hook_block().
*/

function brafton_block( $op = 'list',$delta = 0,$edit = array() )	{
	$block = array();
	switch ( $op ) {
		case 'list':
			$block[0]['info'] = t( 'Video archives block' );
			$block[1]['info'] = t( 'Video Categories block' );
			break;
		case 'view':
			switch ( $delta ) {
				case 0:
					$block['content'] = gen_video_archives();
					$block['subject'] = t( 'Video Archives' );
					break;
				case 1:
					$block['content'] = gen_video_categories();
					$block['subject'] = t( 'Video Categories' );				
					break;
			}
			break;
		case 'save':
			break;
		case 'configure':
			break;
	}
	return $block;
}

function gen_video_archives()	{
	$query = 'SELECT created FROM {node} WHERE type="b_video" ORDER BY created DESC';
	$result = db_query( $query );
	while ( $row = db_fetch_object( $result ) ) {
		$date_range[] = date( 'Y-m',$row->created );
	}
	if ( !empty( $date_range ) ) {
		$date_range = array_unique( $date_range );
		$html_string = '<ul>';
		foreach ( $date_range as $value ) {
			$date_set = strtotime( $value );
			$month_numerical = date( 'm',$date_set );
			$month_textual = date( 'F',$date_set );
			$year = date( 'Y',$date_set );
			$url = url( 'video-gallery/archive/' . $year . '/' . $month_numerical );
			$html_string .= '<li><a href="' . $url . '">' . $month_textual . ' ' . $year . '</a></li>';
		}
	}
	$html_string .= '</ul>';
	return $html_string;
}

function gen_video_categories()	{
	$vid = get_brafton_vid( 'Brafton video categories' );
	$terms = taxonomy_get_tree( $vid );
	$html_string = '<ul>';
	foreach ( $terms as $value ) {
		if( $value->name != '' ) {
			$url = url( 'taxonomy/term/' . $value->tid );
			$html_string .= '<li><a href="' . $url . '">' . $value->name . '</a></li>';
		}
	}
	$html_string .= '</ul>';
	return $html_string;
}
/*
function gen_related_posts( $node )	{
	$key = key( $node->taxonomy );
	$query = 'SELECT nid FROM {term_node} WHERE tid="' . $key . '"';
	$result = db_query( $query );
	$html_string = '<div style="display:block;">';
	while ( $row = db_fetch_array( $result ) ) {
		if ( $node->nid = $row['nid'] )
			continue;
		$rel = node_load( $row['nid'] );
		$rel_url = url( 'node/' .  $node->nid );
		$html_string .= '<div style="float:left;margin-right:15px;"><a href="' . $rel_url . '"><img src="' . $node->brafton_image . '" style="display:block;" />' . $node->title . '</a></div>';
	}
	$html_string .= '</div>';
	$node->body .= $html_string;
	return $node;
}*/